{"version":3,"sources":["components/button/button.jsx","services/data.js","services/theme.js","assets/themes/theme_data.js","pages/Settings/settings.jsx","components/board/board.jsx","components/field/field.jsx","pages/Game/game.jsx","routes.js","App.jsx","index.js"],"names":["Button","onClick","this","props","type","className","value","Component","gameData","save","data","JSON","stringify","localStorage","setItem","generateData","maxRounds","nameP1","nameP2","roundNumber","gameover","p1","nickname","score","p2","nextRound","last_round","load","players_data","winner","player","Math","trunc","parse","getItem","themes","themes_data","dark","title","bgc","hover","border","textColor","blue","getStyle","element","property","window","getComputedStyle","getPropertyValue","loadThemes","lcStTm","newTheme","setTheme","theme","html","document","querySelector","style","setProperty","Settings","state","redirect","nicknameP1","nicknameP2","inputP1","inputP2","setRounds","bind","changeTheme","rounds","setState","game_data","newState","removeItem","themeIndex","to","placeholder","onChange","e","target","start","Board","children","Field","click","Game","game","board","symbols","options","turn_index","round","random","change","winning_sequences","make_play","check_winning_sequences","check_tied","alert","scoreBoard","position","nextGameStatus","text","icon","confirmText","confirmValue","canceledValue","setTimeout","Swal","fire","timer","timerProgressBar","onBeforeOpen","showLoading","timerInterval","setInterval","content","getContent","b","textContent","getTimerLeft","onClose","clearInterval","then","result","dismiss","DismissReason","cancelText","symbol","returned","map","i","mixin","customClass","confirmButton","cancelButton","buttonsStyling","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","cancel","fill","index","Routes","exact","path","component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1b501d78.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './button.css';\n\nclass Button extends Component {\n    render() {\n        return (\n            <input onClick={this.props.onClick} type=\"button\" className=\"btnRst\" value={this.props.value} />\n        );\n    }\n}\n\nexport default Button;","export const gameData = {\n\n    async save(data) {\n        try {\n            data = await JSON.stringify(data);\n            await localStorage.setItem(\"game_data\", data);\n            return true;\n        } catch (err) {\n            return false;\n        }\n    },\n\n    generateData(maxRounds, nameP1, nameP2) {\n        const game_data = {\n            maxRounds,\n            roundNumber: 1,\n            gameover: false,\n            p1: {\n                nickname: nameP1,\n                score: 0\n            },\n            p2: {\n                nickname: nameP2,\n                score: 0\n            },\n        }\n        return game_data;\n    },\n\n    /*\n    const last_round = {\n        roundNumber: 1\n        winner: {\n            player: 1 | 2\n        },\n    };\n    */\n\n    nextRound(last_round) {\n        const data = this.load();\n        const players_data = {\n            p1: {\n                nickname: data.p1.nickname,\n                score: (last_round.winner.player === 1) ? ++data.p1.score : data.p1.score\n            },\n\n            p2: {\n                nickname: data.p2.nickname,\n                score: (last_round.winner.player === 2) ? ++data.p2.score : data.p2.score\n            }\n        };\n\n\n        if (Math.trunc(data.maxRounds / 2) < players_data.p1.score || Math.trunc(data.maxRounds / 2) < players_data.p2.score) {\n            return {\n                winner: (players_data.p1.score > players_data.p2.score) ? 1 : 2,\n                p1: players_data.p1,\n                p2: players_data.p2,\n                gameover: true,\n            };\n        }\n\n\n        const next_game_data = {\n            maxRounds: data.maxRounds,\n            roundNumber: ++last_round.roundNumber,\n            gameover: false,\n            p1: players_data.p1,\n            p2: players_data.p2,\n        }\n        return next_game_data;\n    },\n\n    load() {\n        const game_data = JSON.parse(localStorage.getItem(\"game_data\"));\n        return game_data;\n    }\n\n};\n","import { themes_data } from '../assets/themes/theme_data';\n\nexport const themes = {\n\n    themes_data,\n\n\n    getStyle(element, property) {\n        return window.getComputedStyle(element).getPropertyValue(\"--\" + property);\n    },\n\n    loadThemes() {\n        // localStorageTheme\n        const lcStTm = localStorage.getItem(\"theme\");\n        const newTheme = (lcStTm) ? JSON.parse(lcStTm) : this.themes_data.dark;\n        this.setTheme(newTheme);\n    },\n\n    setTheme(theme) {\n        const html = document.querySelector(\"html\");\n        html.style.setProperty(\"--bgc\", theme.bgc);\n        html.style.setProperty(\"--hover\", theme.hover);\n        html.style.setProperty(\"--border\", theme.border);\n        html.style.setProperty(\"--text-color\", theme.textColor);\n        this.save(theme);\n    },\n\n    save(theme) {\n        localStorage.setItem(\"theme\", JSON.stringify(theme));\n    }\n};","export const themes_data = {\n    dark: {\n        title: \"Dark Theme\",\n        bgc: \"#123\",\n        hover: \"#374757\",\n        border: \"#25323f\",\n        textColor: \"#fff\",\n    },\n    blue: {\n        title: \"Blue Theme\",\n        bgc: \"#2367ac\",\n        hover: \"#4981b9\",\n        border: \"#0c59a7\",\n        textColor: \"#fff\",\n    }\n}","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom'\n\nimport Button from '../../components/button/button';\n\nimport './settings.css'\n\nimport { gameData as game_data } from '../../services/data';\nimport { themes } from '../../services/theme';\n\nclass Settings extends Component {\n\n    state = {\n\n        maxRounds: 1,\n\n        redirect: false,\n        nicknameP1: 'Player 1',\n        nicknameP2: 'Player 2',\n\n        inputP1: '',\n        inputP2: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.setRounds = this.setRounds.bind(this);\n        this.changeTheme = this.changeTheme.bind(this);\n    }\n\n    setRounds(rounds) {\n        this.setState({ maxRounds: rounds });\n    }\n\n    async start() {\n        const maxRounds = this.state.maxRounds;\n        const nicknameP1 = this.state.nicknameP1;\n        const nicknameP2 = this.state.nicknameP2;\n\n        const gameData = await game_data.generateData(maxRounds, nicknameP1, nicknameP2);\n        await game_data.save(gameData);\n        this.setState({ redirect: true });\n    }\n\n    componentDidMount() {\n        const data = localStorage.getItem(\"game_data\") ? game_data.load() : { p1: {}, p2: {} };\n        const newState = {};\n        if (data.p1.nickname && data.p1.nickname !== \"Player 1\") {\n            newState.nicknameP1 = data.p1.nickname;\n            newState.inputP1 = data.p1.nickname;\n        }\n\n        if (data.p2.nickname && data.p2.nickname !== \"Player 2\") {\n            newState.nicknameP2 = data.p2.nickname;\n            newState.inputP2 = data.p2.nickname;\n        }\n\n        if (data.maxRounds) {\n            newState.maxRounds = data.maxRounds;\n        }\n\n        this.setState(newState);\n\n        localStorage.removeItem(\"game_data\")\n\n\n        themes.loadThemes();\n\n    }\n\n    changeTheme(themeIndex) {\n\n        switch (themeIndex) {\n            case 0:\n                themes.setTheme(themes.themes_data.dark);\n                break;\n            case 1:\n                themes.setTheme(themes.themes_data.blue);\n                break;\n            default:\n                themes.setTheme(themes.themes_data.dark);\n                break;\n        }\n\n    }\n\n\n\n\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to=\"/ticTacToe\" />\n        } else {\n\n            return (\n                <div className=\"GameSettings\">\n                    <div className=\"themesSets\">\n                        <ul>\n                            <li>\n                                <Button onClick={() => this.changeTheme(0)} value={themes.themes_data.dark.title} />\n                            </li>\n\n                            <li>\n                                <Button onClick={() => this.changeTheme(1)} value={themes.themes_data.blue.title} />\n                            </li>\n\n                        </ul>\n                    </div>\n\n                    <div className=\"rounds\">\n                        <h1>Rounds: </h1>\n                        <ul>\n                            <li>\n                                <Button onClick={() => this.setRounds(1)} value=\"1\" />\n                            </li>\n\n                            <li>\n                                <Button onClick={() => this.setRounds(3)} value=\"3\" />\n                            </li>\n\n                            <li>\n                                <Button onClick={() => this.setRounds(5)} value=\"5\" />\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"players\">\n                        <div>\n                            <h1>Player 1: </h1>\n                            <input type=\"text\" placeholder=\"Name...\" className=\"inputNickname\" onChange={(e) => this.setState({ inputP1: e.target.value, nicknameP1: e.target.value })} value={this.state.inputP1} />\n                        </div>\n\n                        <div>\n                            <h1>Player 2: </h1>\n                            <input type=\"text\" placeholder=\"Name...\" className=\"inputNickname\" onChange={(e) => this.setState({ inputP2: e.target.value, nicknameP2: e.target.value })} value={this.state.inputP2} />\n                        </div>\n                    </div>\n                    <div>\n                        <Button onClick={() => this.start()} value=\"Start!\" />\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Settings;","import React, { Component } from 'react';\n\nimport './board.css'\n\nclass Board extends Component {\n    render() {\n        return (\n            <div className=\"board\">\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React, { Component } from 'react';\n\nimport './field.css';\n\nclass Field extends Component {\n    render() {\n        return (\n            <div className=\"field\" onClick={this.props.click}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Field;\n","import React, { Component } from 'react';\nimport Swal from 'sweetalert2'\nimport './game.css';\nimport '../../assets/lib/bootstrap.min.css'\n\nimport { Redirect, Link } from 'react-router-dom'\n\nimport Board from '../../components/board/board';\nimport Field from '../../components/field/field';\nimport Button from '../../components/button/button';\n\nimport { gameData as game_data } from '../../services/data';\nimport { themes } from '../../services/theme';\n\nclass Game extends Component {\n\n    state = {\n        game: {\n            p1: {\n                nickname: \"\",\n            },\n            p2: {\n                nickname: \"\",\n            }\n        },\n\n\n        board: ['', '', '', '', '', '', '', '', ''],\n        symbols: {\n            options: ['X', 'O'],\n            turn_index: Math.round(Math.random(0, 1)),\n            change() {\n                this.turn_index = (this.turn_index === 0) ? 1 : 0;\n            }\n        },\n\n        winning_sequences: [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6]\n        ],\n        gameover: false,\n\n        redirect: false\n\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.make_play = this.make_play.bind(this);\n        this.check_winning_sequences = this.check_winning_sequences.bind(this);\n        this.check_tied = this.check_tied.bind(this);\n        this.alert = this.alert.bind(this);\n        this.scoreBoard = this.scoreBoard.bind(this);\n        this.start = this.start.bind(this);\n    }\n\n    componentDidMount() {\n        const game = game_data.load();\n        this.setState({ game });\n        themes.loadThemes();\n    }\n\n    \n    async make_play(position) {\n\n        if (this.state.gameover) return false;\n        if (this.state.board[position] === '') {\n            const board = this.state.board;\n            board[position] = this.state.symbols.options[this.state.symbols.turn_index];\n            this.setState({ board })\n            const check_winning_sequences_index = this.check_winning_sequences(this.state.symbols.options[this.state.symbols.turn_index])\n            if (check_winning_sequences_index >= 0) {\n                this.setState({ gameover: true })\n\n                const state = this.state;\n\n                const last_round = {\n                    roundNumber: state.game.roundNumber,\n                    winner: {\n                        player: (state.symbols.options[state.symbols.turn_index] === \"X\") ? 1 : 2,\n                    }\n                }\n\n                const nextGameStatus = game_data.nextRound(last_round);\n                if (nextGameStatus.gameover === true) {\n                    const data = {\n                        title: `Winner: ${(nextGameStatus.winner === 1) ? nextGameStatus.p1.nickname : nextGameStatus.p2.nickname}`,\n                        text: `\n                        <strong>${this.state.game.p1.nickname}</strong>: ${nextGameStatus.p1.score}<br>\n                        <strong>${this.state.game.p2.nickname}</strong>: ${nextGameStatus.p2.score}<br><br>\n\n                        Settings?\n                        \n                        `,\n                        icon: 'success',\n                        confirmText: 'Yes!',\n                        confirmValue: () => this.setState({ redirect: true }),\n                        canceledValue() { }\n                    }\n                    setTimeout(() => this.alert(data), 150);\n                } else {\n                    await game_data.save(nextGameStatus)\n\n                    let timerInterval;\n                    Swal.fire({\n                        title: 'Next round',\n                        html: 'Next round in <b></b> milliseconds.',\n                        timer: 700,\n                        timerProgressBar: true,\n                        onBeforeOpen: () => {\n                            Swal.showLoading()\n                            timerInterval = setInterval(() => {\n                                const content = Swal.getContent()\n                                if (content) {\n                                    const b = content.querySelector('b')\n                                    if (b) {\n                                        b.textContent = Swal.getTimerLeft()\n                                    }\n                                }\n                            }, 100)\n                        },\n                        onClose: () => {\n                            clearInterval(timerInterval)\n                            this.start()\n                        }\n                    }).then((result) => {\n                        /* Read more about handling dismissals below */\n                        if (result.dismiss === Swal.DismissReason.timer) {\n                            // console.log('I was closed by the timer')\n                        }\n                    })\n\n                }\n\n\n\n            } else {\n                this.state.symbols.change();\n                if (this.check_tied()) {\n                    this.setState({ gameover: true })\n\n\n                    const data = {\n                        title: 'We Tied',\n                        text: 'Restart?',\n                        icon: 'info',\n                        confirmText: 'Yes!',\n                        cancelText: 'No!',\n                        confirmValue() { },\n                        canceledValue() { }\n                    }\n\n                    setTimeout(() => this.alert(data), 150);\n                }\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n\n    check_winning_sequences(symbol) {\n\n        let returned = -1;\n\n        // eslint-disable-next-line\n        this.state.winning_sequences.map((value, i) => {\n            if (this.state.board[this.state.winning_sequences[i][0]] === symbol &&\n                this.state.board[this.state.winning_sequences[i][1]] === symbol &&\n                this.state.board[this.state.winning_sequences[i][2]] === symbol) {\n                returned = i;\n            }\n        });\n        return returned;\n    }\n\n    // If tied return true\n    check_tied() {\n        let returned = true;\n\n        // eslint-disable-next-line\n        this.state.board.map((value, i) => {\n            if (this.state.board[i] === '') returned = false;\n        });\n        return returned;\n    }\n\n    alert(data) {\n        const swalWithBootstrapButtons = Swal.mixin({\n            customClass: {\n                confirmButton: 'btn btn-success confirmBtn',\n                cancelButton: 'btn btn-secondary cancelBtn'\n            },\n            buttonsStyling: false\n        })\n\n        swalWithBootstrapButtons.fire({\n            title: data.title,\n            html: data.text,\n            icon: data.icon,\n            showCancelButton: (data.cancelText) ? true : false,\n            confirmButtonText: data.confirmText,\n            cancelButtonText: data.cancelText,\n            reverseButtons: true\n        }).then((result) => {\n            if (result.value) {\n                // Accept\n                this.start();\n                data.confirmValue();\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\n                // Canceled\n                data.canceledValue();\n            }\n\n        })\n    }\n\n    scoreBoard() {\n        const game = game_data.load();\n        alert(`\n            ${game.p1.nickname}: ${game.p1.score}\n            ${game.p2.nickname}: ${game.p2.score}\n        `);\n    }\n\n\n\n\n    start() {\n\n        const symbols = this.state.symbols;\n        let board = this.state.board;\n        symbols.turn_index = Math.round(Math.random(0, 1));\n        board.fill('');\n\n        this.setState({ symbols, board, gameover: false });\n    }\n\n\n\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to=\"/\" />\n        } else {\n            return (\n                <div className=\"Game\">\n\n                    <h1 className=\"player\">Turn: {(this.state.symbols.options[this.state.symbols.turn_index] === \"X\") ? this.state.game.p1.nickname : this.state.game.p2.nickname} ({this.state.symbols.options[this.state.symbols.turn_index]})</h1>\n\n                    <Board>\n                        {this.state.board.map((value, index) =>\n                            <Field key={index} click={() => this.make_play(index)}>{value}</Field>)\n                        }\n                    </Board>\n                    <div className=\"buttons\">\n                        <Link to=\"/\"><Button value=\"Settings\" /></Link>\n                        <Button onClick={() => this.scoreBoard()} value=\"Score Board\" />\n                        <Button onClick={() => this.start()} value=\"Restart\" />\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\n\n\nexport default Game;","import React, { Component } from 'react';\n\n\n// Router\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\n\n// Pages\nimport Settings from './pages/Settings/settings';\nimport Game from './pages/Game/game';\n\n\nclass Routes extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path=\"/\" component={Settings} />\n                    <Route path=\"/ticTacToe\" component={Game} />\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default Routes;","import React, { Component } from 'react';\n\n\n// Styles\nimport './App.css';\n\n\n// Components\nimport Routes from './routes';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Routes />\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './boot.css';\n\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}